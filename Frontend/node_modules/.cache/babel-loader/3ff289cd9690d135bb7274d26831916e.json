{"ast":null,"code":"var _jsxFileName = \"/home/luisa/Documents/GoStack/Desafios/desafio-fundamentos-reactjs/src/pages/Dashboard/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport income from \"../../assets/income.svg\";\nimport outcome from \"../../assets/outcome.svg\";\nimport total from \"../../assets/total.svg\";\nimport api from '../../services/api';\nimport Header from '../../components/Header';\nimport formatValue from '../../utils/formatValue';\nimport { Container, CardContainer, Card, TableContainer } from './styles';\n\nconst Dashboard = () => {\n  // Vai vir da api\n  const [transactions, setTransactions] = useState([]);\n  const [balance, setBalance] = useState({});\n  useEffect(() => {\n    async function loadTransactions() {\n      const response = await api.get('/transactions');\n      const transactionsFormatted = response.data.transactions.map(transaction => ({ ...transaction,\n        formattedValue: formatValue(transaction.value),\n        formattedDate: new Date(transaction.created_at).toLocaleDateString('pt-br')\n      }));\n      const balanceFormatted = {\n        income: formatValue(response.data.balance.income),\n        outcome: formatValue(response.data.balance.outcome),\n        total: formatValue(response.data.balance.total)\n      };\n      setTransactions(transactionsFormatted);\n      setBalance(balanceFormatted);\n    }\n\n    loadTransactions();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, \"Entradas\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: income,\n    alt: \"Income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    \"data-testid\": \"balance-income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, balance.income)), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }, \"Sa\\xEDdas\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: outcome,\n    alt: \"Outcome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    \"data-testid\": \"balance-outcome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, balance.outcome)), /*#__PURE__*/React.createElement(Card, {\n    total: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }, \"Total\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: total,\n    alt: \"Total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"h1\", {\n    \"data-testid\": \"balance-total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, balance.total))), /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"T\\xEDtulo\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"Pre\\xE7o\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"Categoria\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Data\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, transactions.map(transaction => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }\n  }, transaction.title), /*#__PURE__*/React.createElement(\"td\", {\n    className: \"income\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 19\n    }\n  }, transaction.type == 'outcome' && '-', transaction.formattedValue), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }, transaction.category.title), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }\n  }, \"20/04/2020\"))))))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/luisa/Documents/GoStack/Desafios/desafio-fundamentos-reactjs/src/pages/Dashboard/index.tsx"],"names":["React","useState","useEffect","api","Header","formatValue","Container","CardContainer","Card","TableContainer","Dashboard","transactions","setTransactions","balance","setBalance","loadTransactions","response","get","transactionsFormatted","data","map","transaction","formattedValue","value","formattedDate","Date","created_at","toLocaleDateString","balanceFormatted","income","outcome","total","title","type","category"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport income from '../../assets/income.svg';\nimport outcome from '../../assets/outcome.svg';\nimport total from '../../assets/total.svg';\n\nimport api from '../../services/api';\n\nimport Header from '../../components/Header';\n\nimport formatValue from '../../utils/formatValue';\n\nimport { Container, CardContainer, Card, TableContainer } from './styles';\n\ninterface Transaction {\n  id: string;\n  title: string;\n  value: number;\n  formattedValue: string;\n  formattedDate: string;\n  type: 'income' | 'outcome';\n  category: { title: string };\n  created_at: Date;\n}\n\ninterface Balance {\n  income: string;\n  outcome: string;\n  total: string;\n}\n\nconst Dashboard: React.FC = () => {\n  // Vai vir da api\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [balance, setBalance] = useState<Balance>({} as Balance);\n\n  useEffect(() => {\n    async function loadTransactions(): Promise<void> {\n      const response = await api.get('/transactions');\n\n      const transactionsFormatted = response.data.transactions.map(\n        (transaction: Transaction) => ({\n          ...transaction,\n          formattedValue: formatValue(transaction.value),\n          formattedDate: new Date(transaction.created_at).toLocaleDateString(\n            'pt-br',\n          ),\n        }),\n      );\n\n      const balanceFormatted = {\n        income: formatValue(response.data.balance.income),\n        outcome: formatValue(response.data.balance.outcome),\n        total: formatValue(response.data.balance.total),\n      };\n\n      setTransactions(transactionsFormatted);\n      setBalance(balanceFormatted);\n    }\n\n    loadTransactions();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <CardContainer>\n          <Card>\n            <header>\n              <p>Entradas</p>\n              <img src={income} alt=\"Income\" />\n            </header>\n            <h1 data-testid=\"balance-income\">{balance.income}</h1>\n          </Card>\n          <Card>\n            <header>\n              <p>Saídas</p>\n              <img src={outcome} alt=\"Outcome\" />\n            </header>\n            <h1 data-testid=\"balance-outcome\">{balance.outcome}</h1>\n          </Card>\n          <Card total>\n            <header>\n              <p>Total</p>\n              <img src={total} alt=\"Total\" />\n            </header>\n            <h1 data-testid=\"balance-total\">{balance.total}</h1>\n          </Card>\n        </CardContainer>\n\n        <TableContainer>\n          <table>\n            <thead>\n              <tr>\n                <th>Título</th>\n                <th>Preço</th>\n                <th>Categoria</th>\n                <th>Data</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {transactions.map(transaction => (\n                <tr>\n                  <td className=\"title\">{transaction.title}</td>\n                  <td className=\"income\">\n                    {transaction.type == 'outcome' && '-'}\n                    {transaction.formattedValue}\n                  </td>\n                  <td>{transaction.category.title}</td>\n                  <td>20/04/2020</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </TableContainer>\n      </Container>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}